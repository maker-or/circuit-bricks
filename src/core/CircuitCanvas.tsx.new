/**
 * CircuitCanvas Component
 * 
 * The main canvas component that renders circuit components and wires.
 */

import React, { useRef, useState, useEffect } from 'react';
import { ComponentInstance, Wire, Point } from '../types';
import Brick from './Brick';
import WirePath from './WirePath';
import { getPortPosition } from '../utils/getPortPosition';
import { getComponentSchema } from '../registry';

export interface CircuitCanvasProps {
  components: ComponentInstance[];
  wires: Wire[];
  width?: number | string;
  height?: number | string;
  onComponentClick?: (id: string, event: React.MouseEvent) => void;
  onWireClick?: (id: string, event: React.MouseEvent) => void;
  onCanvasClick?: (event: React.MouseEvent) => void;
  onComponentDrag?: (id: string, newPosition: Point) => void;
  onWireDrawStart?: (componentId: string, portId: string) => void;
  onWireDrawEnd?: (componentId: string, portId: string) => boolean;
  onWireDrawCancel?: () => void;
  wireDrawing?: {
    isDrawing: boolean;
    fromComponentId: string | null;
    fromPortId: string | null;
  };
  selectedComponentIds?: string[];
  selectedWireIds?: string[];
  showGrid?: boolean;
  gridSize?: number;
  snapToGrid?: boolean;
  onComponentDrop?: (componentType: string, position: Point) => void;
}

export const CircuitCanvas: React.FC<CircuitCanvasProps> = ({
  components,
  wires,
  width = '100%',
  height = '100%',
  onComponentClick,
  onWireClick,
  onCanvasClick,
  onComponentDrag,
  onWireDrawStart,
  onWireDrawEnd,
  onWireDrawCancel,
  wireDrawing = {
    isDrawing: false,
    fromComponentId: null,
    fromPortId: null
  },
  selectedComponentIds = [],
  selectedWireIds = [],
  showGrid = true,
  gridSize = 20,
  snapToGrid = true,
  onComponentDrop
}) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const [dragState, setDragState] = useState<{
    isDragging: boolean;
    componentId: string | null;
    startPos: Point | null;
    currentPos: Point | null;
  }>({
    isDragging: false,
    componentId: null,
    startPos: null,
    currentPos: null
  });
  
  const [currentMousePos, setCurrentMousePos] = useState<Point | null>(null);

  // Get SVG coordinates from mouse event
  const getSvgCoordinates = (e: React.MouseEvent | React.DragEvent): Point => {
    if (!svgRef.current) return { x: 0, y: 0 };
    
    const svgRect = svgRef.current.getBoundingClientRect();
    const x = e.clientX - svgRect.left;
    const y = e.clientY - svgRect.top;
    
    // Snap to grid if enabled
    if (snapToGrid) {
      return { 
        x: Math.round(x / gridSize) * gridSize,
        y: Math.round(y / gridSize) * gridSize
      };
    }
    
    return { x, y };
  };

  const handleCanvasClick = (e: React.MouseEvent) => {
    // Only trigger if the click is directly on the canvas
    if (e.target === e.currentTarget) {
      onCanvasClick?.(e);
      
      // If we're drawing a wire, cancel it
      if (wireDrawing.isDrawing) {
        onWireDrawCancel?.();
      }
    }
  };

  const handleComponentClick = (id: string, event: React.MouseEvent) => {
    // Only handle click if we're not dragging
    if (!dragState.isDragging) {
      onComponentClick?.(id, event);
    }
  };

  const handleWireClick = (id: string, event: React.MouseEvent) => {
    onWireClick?.(id, event);
  };

  const handleMouseDown = (componentId: string, event: React.MouseEvent) => {
    // Start dragging if we clicked on a component
    if (selectedComponentIds.includes(componentId)) {
      const startPos = getSvgCoordinates(event);
      setDragState({
        isDragging: true,
        componentId,
        startPos,
        currentPos: startPos
      });
      event.stopPropagation();
    }
  };

  const handleMouseMove = (event: React.MouseEvent) => {
    const currentPos = getSvgCoordinates(event);
    setCurrentMousePos(currentPos);
    
    // Update drag position if dragging
    if (dragState.isDragging && dragState.componentId) {
      setDragState({ ...dragState, currentPos });
      
      // Find the component being dragged
      const component = components.find(c => c.id === dragState.componentId);
      if (component && dragState.startPos && currentPos) {
        // Calculate the new position
        const dx = currentPos.x - dragState.startPos.x;
        const dy = currentPos.y - dragState.startPos.y;
        const newPosition = {
          x: component.position.x + dx,
          y: component.position.y + dy
        };
        
        // Snap to grid if needed
        if (snapToGrid) {
          newPosition.x = Math.round(newPosition.x / gridSize) * gridSize;
          newPosition.y = Math.round(newPosition.y / gridSize) * gridSize;
        }
        
        // Call the onComponentDrag handler
        onComponentDrag?.(dragState.componentId, newPosition);
      }
    }
  };

  const handleMouseUp = () => {
    // End dragging
    if (dragState.isDragging) {
      setDragState({
        isDragging: false,
        componentId: null,
        startPos: null,
        currentPos: null
      });
    }
  };

  const handlePortClick = (componentId: string, portId: string, event: React.MouseEvent) => {
    event.stopPropagation();
    
    // If we're not drawing a wire, start drawing
    if (!wireDrawing.isDrawing) {
      onWireDrawStart?.(componentId, portId);
    } else {
      // If we are drawing a wire, end drawing and connect to this port
      if (wireDrawing.fromComponentId && wireDrawing.fromPortId) {
        onWireDrawEnd?.(componentId, portId);
      }
    }
  };

  // Calculate the position of the source port for wire drawing
  const getSourcePortPosition = (): Point | null => {
    if (!wireDrawing.isDrawing || !wireDrawing.fromComponentId || !wireDrawing.fromPortId) {
      return null;
    }

    const component = components.find(c => c.id === wireDrawing.fromComponentId);
    if (!component) return null;

    const schema = getComponentSchema(component.type);
    if (!schema) return null;

    const port = schema.ports.find(p => p.id === wireDrawing.fromPortId);
    if (!port) return null;

    return getPortPosition(component, port);
  };
  
  // Handle drag and drop events for component palette
  const handleDragOver = (event: React.DragEvent) => {
    // Prevent default to allow drop
    event.preventDefault();
    // Set the drop effect to copy
    event.dataTransfer.dropEffect = 'copy';
  };
  
  const handleDrop = (event: React.DragEvent) => {
    event.preventDefault();
    
    // Get the component type from the drag data
    const componentType = event.dataTransfer.getData('application/circuit-component');
    if (!componentType || !onComponentDrop) return;
    
    // Get drop position in SVG coordinates
    const position = getSvgCoordinates(event);
    
    // Create a new component at this position
    onComponentDrop(componentType, position);
  };

  return (
    <svg 
      ref={svgRef}
      width={width}
      height={height}
      style={{ 
        backgroundColor: '#fafafa',
        userSelect: 'none'
      }}
      onClick={handleCanvasClick}
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
      onDragOver={handleDragOver}
      onDrop={handleDrop}
      data-circuit-canvas
    >
      {/* Grid pattern (optional) */}
      <defs>
        <pattern
          id="grid"
          width={gridSize}
          height={gridSize}
          patternUnits="userSpaceOnUse"
        >
          <path
            d={`M ${gridSize} 0 L 0 0 0 ${gridSize}`}
            fill="none"
            stroke="#f0f0f0"
            strokeWidth="1"
          />
        </pattern>
      </defs>
      {showGrid && <rect width="100%" height="100%" fill="url(#grid)" />}

      {/* Wires layer */}
      <g className="circuit-wires">
        {wires.map(wire => (
          <WirePath
            key={wire.id}
            wire={wire}
            components={components}
            selected={selectedWireIds.includes(wire.id)}
            onClick={(e) => handleWireClick(wire.id, e)}
          />
        ))}
        
        {/* Wire currently being drawn */}
        {wireDrawing.isDrawing && wireDrawing.fromComponentId && wireDrawing.fromPortId && currentMousePos && (
          <path
            d={(() => {
              const sourcePos = getSourcePortPosition();
              if (!sourcePos) return '';
              
              const dx = Math.abs(currentMousePos.x - sourcePos.x);
              const midX = sourcePos.x + (currentMousePos.x - sourcePos.x) / 2;
              
              // Create a simple path with corners
              return `M ${sourcePos.x} ${sourcePos.y} 
                      C ${midX} ${sourcePos.y}, 
                        ${midX} ${currentMousePos.y}, 
                        ${currentMousePos.x} ${currentMousePos.y}`;
            })()}
            stroke="#4f8ef7"
            strokeWidth={2}
            strokeDasharray="5,5"
            fill="none"
          />
        )}
      </g>

      {/* Components layer */}
      <g className="circuit-components">
        {components.map(component => (
          <Brick
            key={component.id}
            component={component}
            selected={selectedComponentIds.includes(component.id)}
            onClick={(e) => handleComponentClick(component.id, e)}
            onMouseDown={(e) => handleMouseDown(component.id, e)}
            onPortClick={handlePortClick}
          />
        ))}
      </g>
    </svg>
  );
};

export default CircuitCanvas;
